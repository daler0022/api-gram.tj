{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/daler/map/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.map.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { LMap, LImageOverlay, LTileLayer, LMarker, LPopup, LTooltip, LControlLayers, LPolyline, LPolygon, LFeatureGroup, LControl } from 'vue2-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport 'leaflet-toolbar/dist/leaflet.toolbar.css';\nimport 'leaflet-toolbar/dist/leaflet.toolbar.js';\nexport default {\n  name: \"dashboard\",\n  data: function data() {\n    return {\n      markers: [{\n        latlngs: [47.313220, -1.319482],\n        options: {}\n      }],\n      polylines: [{\n        latlngs: [[47.334852, -1.509485], [47.342596, -1.328731], [47.241487, -1.190568], [47.234787, -1.358337]],\n        options: {\n          color: 'green'\n        }\n      }],\n      polygons: [{\n        latlngs: [[-31.80544561213633, -52.417917251586914], [-31.809092668943386, -52.409076690673835], [-31.815073530409784, -52.416801452636726], [-31.81055145135166, -52.43001937866212], [-31.802527863029503, -52.4209213256836]],\n        options: {}\n      }],\n      retangles: [],\n      circles: []\n    };\n  },\n  created: function created() {},\n  methods: {},\n  computed: {},\n  components: {\n    Sidenav: Sidenav,\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    LMarker: LMarker,\n    LPopup: LPopup,\n    LImageOverlay: LImageOverlay,\n    LTooltip: LTooltip,\n    LPolyline: LPolyline,\n    LControlLayers: LControlLayers,\n    LFeatureGroup: LFeatureGroup,\n    LPolygon: LPolygon\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      var map = _this.$refs.map.mapObject; // Cria a layer de edição\n\n      var drawnItems = new L.FeatureGroup();\n      map.addLayer(drawnItems); // Converte Polygons para Layers e adiciona para o drawnItems\n\n      if (_this.polygons) {\n        var _iterator = _createForOfIteratorHelper(polygonLayer),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var layer = _step.value;\n            drawnItems.addLayer(layer);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } // Converte Markers para Layers e adiciona para o drawnItems\n\n\n      if (_this.markers) {\n        var markerLayer = _this.markers.map(function (m) {\n          return L.marker(m.latlngs, m.options);\n        });\n\n        var _iterator2 = _createForOfIteratorHelper(markerLayer),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _layer = _step2.value;\n            drawnItems.addLayer(_layer);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } // Converte Polyline para Layers e adiciona para o drawnItems\n\n\n      if (_this.polylines) {\n        var polylineLayer = _this.polylines.map(function (p) {\n          return L.polyline(p.latlngs, p.options);\n        });\n\n        var _iterator3 = _createForOfIteratorHelper(polylineLayer),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _layer2 = _step3.value;\n            drawnItems.addLayer(_layer2);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } // Converte Retangle para Layers e adiciona para o drawnItems\n\n\n      if (_this.retangles) {\n        var retangleLayer = _this.retangles.map(function (r) {\n          return L.retangle(r.latlngs, r.options);\n        });\n\n        var _iterator4 = _createForOfIteratorHelper(retangleLayer),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _layer3 = _step4.value;\n            drawnItems.addLayer(_layer3);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } // Converte Circle para Layers e adiciona para o drawnItems\n\n\n      if (_this.circles) {\n        var circleLayer = _this.circles.map(function (r) {\n          return L.circle(r.latlngs, r.options);\n        });\n\n        var _iterator5 = _createForOfIteratorHelper(circleLayer),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _layer4 = _step5.value;\n            drawnItems.addLayer(_layer4);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n\n      var newThis = _this;\n      map.on('draw:edited', function (e) {\n        var geometrys = [];\n        var options = {};\n\n        if (e.layerType == 'polygon' || e.layerType == 'rectangle') {\n          geometrys = e.layer._latlngs[0].map(function (g) {\n            return {\n              latitude: g.lat,\n              longitude: g.lng\n            };\n          });\n        } else if (e.layerType == 'polyline') {\n          geometrys = e.layer._latlngs.map(function (g) {\n            return {\n              latitude: g.lat,\n              longitude: g.lng\n            };\n          });\n        } else if (e.layerType == 'circle') {\n          geometrys = [{\n            latitude: e.layer._latlng.lat,\n            longitude: e.layer._latlng.lng\n          }];\n          options.radius = e.layer._mRadius;\n        }\n\n        var newAnnotation = {\n          type: e.layerType,\n          owner: newThis.$store.state.auth.user.id,\n          plan: newThis.$store.getters.getCurrentPlan.id,\n          geometrys: geometrys,\n          options: options\n        };\n        newThis.$store.dispatch('editAnnotation', newAnnotation);\n      });\n      map.on('draw:created', function (e) {\n        var geometrys = [];\n        var options = {};\n\n        if (e.layerType == 'polygon' || e.layerType == 'rectangle') {\n          geometrys = e.layer._latlngs[0].map(function (g) {\n            return {\n              latitude: g.lat,\n              longitude: g.lng\n            };\n          });\n        } else if (e.layerType == 'polyline') {\n          geometrys = e.layer._latlngs.map(function (g) {\n            return {\n              latitude: g.lat,\n              longitude: g.lng\n            };\n          });\n        } else if (e.layerType == 'circle') {\n          geometrys = [{\n            latitude: e.layer._latlng.lat,\n            longitude: e.layer._latlng.lng\n          }];\n          options.radius = e.layer._mRadius;\n        }\n\n        var newAnnotation = {\n          type: e.layerType,\n          owner: newThis.$store.state.auth.user.id,\n          plan: newThis.$store.getters.getCurrentPlan.id,\n          geometrys: geometrys,\n          options: options\n        };\n        newThis.$store.dispatch('postAnnotation', newAnnotation);\n      });\n      var drawControl = new L.Control.Draw({\n        position: 'topright',\n        draw: {\n          polyline: {\n            allowIntersection: false,\n            showArea: true\n          },\n          polygon: true,\n          rectangle: true,\n          circle: true,\n          marker: true,\n          circlemarker: false\n        },\n        edit: {\n          featureGroup: drawnItems\n        }\n      });\n      map.addControl(drawControl);\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA,iBADA;EAEAC,IAFA,kBAEA;IACA;MACAC,UACA;QACAC,+BADA;QAEAC;MAFA,CADA,CADA;MAOAC,YACA;QACAF,UACA,sBADA,EAEA,sBAFA,EAGA,sBAHA,EAIA,sBAJA,CADA;QAOAC;UACAE;QADA;MAPA,CADA,CAPA;MAoBAC,WACA;QACAJ,UACA,yCADA,EAEA,0CAFA,EAGA,0CAHA,EAIA,wCAJA,EAKA,wCALA,CADA;QAQAC;MARA,CADA,CApBA;MAgCAI,aAhCA;MAiCAC;IAjCA;EAmCA,CAtCA;EAuCAC,OAvCA,qBAuCA,CACA,CAxCA;EAyCAC,WAzCA;EA2CAC,YA3CA;EA6CAC;IACAC,gBADA;IAEAC,UAFA;IAGAC,sBAHA;IAIAC,gBAJA;IAKAC,cALA;IAMAC,4BANA;IAOAC,kBAPA;IAQAC,oBARA;IASAC,8BATA;IAUAC,4BAVA;IAWAC;EAXA,CA7CA;EA0DAC,OA1DA,qBA0DA;IAAA;;IAEA;MAEA,oCAFA,CAIA;;MACA;MACAC,yBANA,CAQA;;MACA;QAAA,2CACAC,YADA;QAAA;;QAAA;UACA;YAAA;YACAC;UACA;QAHA;UAAA;QAAA;UAAA;QAAA;MAIA,CAbA,CAeA;;;MACA;QACA;UAAA;QAAA;;QADA,4CAEAC,WAFA;QAAA;;QAAA;UAEA;YAAA;YACAD;UACA;QAJA;UAAA;QAAA;UAAA;QAAA;MAKA,CArBA,CAuBA;;;MACA;QACA;UAAA;QAAA;;QADA,4CAEAE,aAFA;QAAA;;QAAA;UAEA;YAAA;YACAF;UACA;QAJA;UAAA;QAAA;UAAA;QAAA;MAKA,CA7BA,CA+BA;;;MACA;QACA;UAAA;QAAA;;QADA,4CAEAG,aAFA;QAAA;;QAAA;UAEA;YAAA;YACAH;UACA;QAJA;UAAA;QAAA;UAAA;QAAA;MAKA,CArCA,CAuCA;;;MACA;QACA;UAAA;QAAA;;QADA,4CAEAI,WAFA;QAAA;;QAAA;UAEA;YAAA;YACAJ;UACA;QAJA;UAAA;QAAA;UAAA;QAAA;MAKA;;MAEA;MAEAF;QACA;QACA;;QAEA;UACAO;YAAA;cAAAC;cAAAC;YAAA;UAAA;QACA,CAFA,MAEA;UACAF;YAAA;cAAAC;cAAAC;YAAA;UAAA;QACA,CAFA,MAEA;UACAF;YAAAC;YAAAC;UAAA;UACA/B;QACA;;QAEA;UACAgC,iBADA;UAEAC,wCAFA;UAGAC,8CAHA;UAIAL,oBAJA;UAKA7B;QALA;QAQAmC;MACA,CAtBA;MAwBAb;QACA;QACA;;QAEA;UACAO;YAAA;cAAAC;cAAAC;YAAA;UAAA;QACA,CAFA,MAEA;UACAF;YAAA;cAAAC;cAAAC;YAAA;UAAA;QACA,CAFA,MAEA;UACAF;YAAAC;YAAAC;UAAA;UACA/B;QACA;;QAEA;UACAgC,iBADA;UAEAC,wCAFA;UAGAC,8CAHA;UAIAL,oBAJA;UAKA7B;QALA;QAQAmC;MACA,CAtBA;MAwBA;QACAC,oBADA;QAEAC;UACAC;YACAC,wBADA;YAEAC;UAFA,CADA;UAKAC,aALA;UAMAC,eANA;UAOAC,YAPA;UAQAC,YARA;UASAC;QATA,CAFA;QAaAC;UACAC;QADA;MAbA;MAmBAzB;IAEA,CAtHA;EAuHA;AAnLA","names":["name","data","markers","latlngs","options","polylines","color","polygons","retangles","circles","created","methods","computed","components","Sidenav","LMap","LTileLayer","LMarker","LPopup","LImageOverlay","LTooltip","LPolyline","LControlLayers","LFeatureGroup","LPolygon","mounted","map","polygonLayer","drawnItems","markerLayer","polylineLayer","retangleLayer","circleLayer","geometrys","latitude","longitude","type","owner","plan","newThis","position","draw","polyline","allowIntersection","showArea","polygon","rectangle","circle","marker","circlemarker","edit","featureGroup"],"sourceRoot":"src/components/Map","sources":["CustomMap.vue"],"sourcesContent":["<template>\n\t<div class=\"dashboard\">\n    <l-map\n      :key=\"componentKey\"\n      :zoom=\"zoom\"\n      :center=\"center\"\n      :options=\"mapOptions\"\n      :max-zoom=\"maxZoom\"\n      @update:center=\"centerUpdate\"\n      @update:zoom=\"zoomUpdate\"\n      @click=\"mapClick\"\n      ref=\"map\"\n    >\n      <l-tile-layer\n        :url=\"url\"\n        :options=\"{ maxZoom: 20}\"\n      />\n      <l-tile-layer\n        v-for=\"(orthomosaic) in computedOrthomosaics\"\n        :url=\"orthomosaic.tilesUrl\"\n        :tms=\"true\"\n        :key=\"orthomosaic.id\"\n        :options=\"{ maxZoom: 20, bounds: getPlanGeometry  }\"\n        :opacity=\"parseFloat(orthomosaic.opacity)\"\n      />\n    </l-map>\n  </div>\n</template>\n\n<script>\nimport { LMap, LImageOverlay, LTileLayer, LMarker, LPopup, LTooltip, LControlLayers, LPolyline, LPolygon, LFeatureGroup, LControl } from 'vue2-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport 'leaflet-toolbar/dist/leaflet.toolbar.css'\nimport 'leaflet-toolbar/dist/leaflet.toolbar.js'\n\nexport default {\n  name: \"dashboard\",\n  data() {\n    return {\n      markers:[\n        {\n          latlngs: [47.313220, -1.319482],\n          options:{}\n        }\n      ],\n      polylines: [\n        {\n          latlngs: [\n            [47.334852, -1.509485], \n            [47.342596, -1.328731], \n            [47.241487, -1.190568], \n            [47.234787, -1.358337]\n          ],\n          options: {\n            color: 'green'\n          }\n        }                \n      ],\n      polygons: [\n        {\n          latlngs: [\n            [-31.80544561213633, -52.417917251586914],\n            [-31.809092668943386, -52.409076690673835],\n            [-31.815073530409784, -52.416801452636726],\n            [-31.81055145135166, -52.43001937866212],\n            [-31.802527863029503, -52.4209213256836]\n          ],\n          options:{}\n        }\n      ],\n      retangles: [],\n      circles: [],\n    };\n  },\n  created() {\n  },\n  methods: {\n  },\n  computed: {\n  },\n  components: {\n    Sidenav,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    LImageOverlay,\n    LTooltip,\n    LPolyline,\n    LControlLayers,\n    LFeatureGroup,\n    LPolygon,\n  },\n  mounted () {\n\n    this.$nextTick(() => {\n\n      const map = this.$refs.map.mapObject;\n\n      // Cria a layer de edição\n      var drawnItems = new L.FeatureGroup();\n      map.addLayer(drawnItems);      \n\n      // Converte Polygons para Layers e adiciona para o drawnItems\n      if(this.polygons){\n        for(let layer of polygonLayer) {\n          drawnItems.addLayer(layer); \n        }\n      }\n\n      // Converte Markers para Layers e adiciona para o drawnItems\n      if(this.markers){\n        let markerLayer = this.markers.map(m => L.marker(m.latlngs, m.options));\n        for(let layer of markerLayer) {\n          drawnItems.addLayer(layer); \n        }\n      }\n\n      // Converte Polyline para Layers e adiciona para o drawnItems\n      if(this.polylines){\n        let polylineLayer = this.polylines.map(p => L.polyline(p.latlngs, p.options));\n        for(let layer of polylineLayer) {\n          drawnItems.addLayer(layer); \n        }\n      }\n\n      // Converte Retangle para Layers e adiciona para o drawnItems\n      if(this.retangles){\n        let retangleLayer = this.retangles.map(r => L.retangle(r.latlngs, r.options));\n        for(let layer of retangleLayer) {\n          drawnItems.addLayer(layer); \n        }\n      }\n\n      // Converte Circle para Layers e adiciona para o drawnItems\n      if(this.circles){\n        let circleLayer = this.circles.map(r => L.circle(r.latlngs, r.options));\n        for(let layer of circleLayer) {\n          drawnItems.addLayer(layer); \n        }\n      }\n\n      var newThis = this\n\n       map.on('draw:edited', function (e) {\n        let geometrys = []\n        let options = {}\n\n        if (e.layerType == 'polygon' || e.layerType == 'rectangle' ) {\n          geometrys = e.layer._latlngs[0].map(g => ({latitude: g.lat, longitude: g.lng }))\n        } else if (e.layerType == 'polyline') {\n          geometrys = e.layer._latlngs.map(g => ({latitude: g.lat, longitude: g.lng }))\n        } else if (e.layerType == 'circle') {\n          geometrys = [{latitude: e.layer._latlng.lat, longitude: e.layer._latlng.lng }]\n          options.radius = e.layer._mRadius\n        }\n\n        let newAnnotation = {\n          type: e.layerType,\n          owner: newThis.$store.state.auth.user.id,\n          plan: newThis.$store.getters.getCurrentPlan.id,\n          geometrys: geometrys,\n          options: options\n        }\n\n        newThis.$store.dispatch('editAnnotation', newAnnotation)\n      })\n      \n      map.on('draw:created', function (e) {\n        let geometrys = []\n        let options = {}\n\n        if (e.layerType == 'polygon' || e.layerType == 'rectangle' ) {\n          geometrys = e.layer._latlngs[0].map(g => ({latitude: g.lat, longitude: g.lng }))\n        } else if (e.layerType == 'polyline') {\n          geometrys = e.layer._latlngs.map(g => ({latitude: g.lat, longitude: g.lng }))\n        } else if (e.layerType == 'circle') {\n          geometrys = [{latitude: e.layer._latlng.lat, longitude: e.layer._latlng.lng }]\n          options.radius = e.layer._mRadius\n        }\n\n        let newAnnotation = {\n          type: e.layerType,\n          owner: newThis.$store.state.auth.user.id,\n          plan: newThis.$store.getters.getCurrentPlan.id,\n          geometrys: geometrys,\n          options: options\n        }\n\n        newThis.$store.dispatch('postAnnotation', newAnnotation)\n      });\n\n      const drawControl = new L.Control.Draw({\n        position: 'topright',\n        draw: {\n          polyline: {\n            allowIntersection: false,\n            showArea: true\n          },\n          polygon: true,\n          rectangle: true,\n          circle: true,\n          marker: true,\n          circlemarker: false\n        },\n        edit: {\n          featureGroup: drawnItems\n        }\n        \n      });\n\n      map.addControl(drawControl);\n\n    })\n  },\n};\n</script>\n\n<style lang=\"scss\">\n</style> "]},"metadata":{},"sourceType":"module"}