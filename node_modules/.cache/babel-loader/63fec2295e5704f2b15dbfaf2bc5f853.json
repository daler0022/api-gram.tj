{"ast":null,"code":"import _defineProperty from \"/home/daler/map/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nexport default {\n  state: {\n    token: localStorage.getItem('user-token') || '',\n    status: ''\n  },\n  getters: {\n    isAuthenticated: function isAuthenticated(state) {\n      return !!state.token;\n    },\n    authStatus: function authStatus(state) {\n      return state.status;\n    }\n  },\n  actions: _defineProperty({}, AUTH_REQUEST, function (_ref, user) {\n    var commit = _ref.commit,\n        dispatch = _ref.dispatch;\n    return new Promise(function (resolve, reject) {\n      // The Promise used for router redirect in login\n      commit(AUTH_REQUEST);\n      axios({\n        url: 'auth',\n        data: user,\n        method: 'POST'\n      }).then(function (resp) {\n        var token = resp.data.token;\n        localStorage.setItem('user-token', token); // store the token in localstorage\n\n        commit(AUTH_SUCCESS, token); // you have your token, now log in your user :)\n\n        dispatch(USER_REQUEST);\n        resolve(resp);\n      }).catch(function (err) {\n        commit(AUTH_ERROR, err);\n        localStorage.removeItem('user-token'); // if the request fails, remove any possible user token if possible\n\n        reject(err);\n      });\n    });\n  })\n};","map":{"version":3,"names":["state","token","localStorage","getItem","status","getters","isAuthenticated","authStatus","actions","AUTH_REQUEST","user","commit","dispatch","Promise","resolve","reject","axios","url","data","method","then","resp","setItem","AUTH_SUCCESS","USER_REQUEST","catch","err","AUTH_ERROR","removeItem"],"sources":["/home/daler/map/src/store/auth.module.js"],"sourcesContent":["export default {\n    state: {\n        token: localStorage.getItem('user-token') || '',\n        status: '',\n    },\n    getters: {\n        isAuthenticated: state => !!state.token,\n        authStatus: state => state.status,\n    },\n    actions: {\n        [AUTH_REQUEST]: ({commit, dispatch}, user) => {\n          return new Promise((resolve, reject) => { // The Promise used for router redirect in login\n            commit(AUTH_REQUEST)\n            axios({url: 'auth', data: user, method: 'POST' })\n              .then(resp => {\n                const token = resp.data.token\n                localStorage.setItem('user-token', token) // store the token in localstorage\n                commit(AUTH_SUCCESS, token)\n                // you have your token, now log in your user :)\n                dispatch(USER_REQUEST)\n                resolve(resp)\n              })\n            .catch(err => {\n              commit(AUTH_ERROR, err)\n              localStorage.removeItem('user-token') // if the request fails, remove any possible user token if possible\n              reject(err)\n            })\n          })\n        }\n      }\n}"],"mappings":";;AAAA,eAAe;EACXA,KAAK,EAAE;IACHC,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,YAArB,KAAsC,EAD1C;IAEHC,MAAM,EAAE;EAFL,CADI;EAKXC,OAAO,EAAE;IACLC,eAAe,EAAE,yBAAAN,KAAK;MAAA,OAAI,CAAC,CAACA,KAAK,CAACC,KAAZ;IAAA,CADjB;IAELM,UAAU,EAAE,oBAAAP,KAAK;MAAA,OAAIA,KAAK,CAACI,MAAV;IAAA;EAFZ,CALE;EASXI,OAAO,sBACFC,YADE,EACa,gBAAqBC,IAArB,EAA8B;IAAA,IAA5BC,MAA4B,QAA5BA,MAA4B;IAAA,IAApBC,QAAoB,QAApBA,QAAoB;IAC5C,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;MAAE;MACxCJ,MAAM,CAACF,YAAD,CAAN;MACAO,KAAK,CAAC;QAACC,GAAG,EAAE,MAAN;QAAcC,IAAI,EAAER,IAApB;QAA0BS,MAAM,EAAE;MAAlC,CAAD,CAAL,CACGC,IADH,CACQ,UAAAC,IAAI,EAAI;QACZ,IAAMpB,KAAK,GAAGoB,IAAI,CAACH,IAAL,CAAUjB,KAAxB;QACAC,YAAY,CAACoB,OAAb,CAAqB,YAArB,EAAmCrB,KAAnC,EAFY,CAE8B;;QAC1CU,MAAM,CAACY,YAAD,EAAetB,KAAf,CAAN,CAHY,CAIZ;;QACAW,QAAQ,CAACY,YAAD,CAAR;QACAV,OAAO,CAACO,IAAD,CAAP;MACD,CARH,EASCI,KATD,CASO,UAAAC,GAAG,EAAI;QACZf,MAAM,CAACgB,UAAD,EAAaD,GAAb,CAAN;QACAxB,YAAY,CAAC0B,UAAb,CAAwB,YAAxB,EAFY,CAE0B;;QACtCb,MAAM,CAACW,GAAD,CAAN;MACD,CAbD;IAcD,CAhBM,CAAP;EAiBD,CAnBE;AATI,CAAf"},"metadata":{},"sourceType":"module"}