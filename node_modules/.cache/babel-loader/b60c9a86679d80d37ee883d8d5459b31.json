{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { LMap, LTileLayer, LPolygon } from 'vue2-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport ToolBarMap from './ToolBarMap.vue';\nimport axios from 'axios'; // import FormDistrict from './FormDistrict.vue'\n// import FormCity from './FormCity.vue'\n// import FormRoute from './FormRoute.vue'\n// import FormHome from './FormHome.vue'\n\nexport default {\n  name: 'custom-map',\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    ToolBarMap: ToolBarMap,\n    LPolygon: LPolygon // FormDistrict,\n    // FormCity,\n    // FormRoute,\n    // FormHome,\n\n  },\n  data: function data() {\n    return {\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      zoom: 11,\n      center: [40.288405, 69.644229],\n      bounds: null,\n      polygons: {}\n    };\n  },\n  mounted: function mounted() {\n    axios.get('https://sip.gram.tj/api/addresses/zones/1/edit');\n  },\n  methods: {\n    zoomUpdated: function zoomUpdated(zoom) {\n      this.zoom = zoom;\n    },\n    centerUpdated: function centerUpdated(center) {\n      this.center = center;\n    },\n    boundsUpdated: function boundsUpdated(bounds) {\n      this.bounds = bounds;\n    },\n    zoomPlus: function zoomPlus() {\n      this.zoom++;\n    },\n    zoomMinus: function zoomMinus() {\n      this.zoom--;\n    },\n    editPolygon: function editPolygon() {\n      var map = this.$refs.map.mapObject;\n      var drawnItems = new window.L.FeatureGroup();\n      map.addLayer(drawnItems);\n      map.on('draw:created', function (e) {\n        var type = e.layerType,\n            layer = e.layer;\n\n        if (type === 'marker') {\n          layer.bindPopup('A popup!');\n        }\n\n        drawnItems.addLayer(layer);\n      });\n      var polygon_options = {\n        showArea: false,\n        shapeOptions: {\n          stroke: true,\n          color: '#6e83f0',\n          weight: 4,\n          opacity: 0.5,\n          fill: true,\n          fillColor: null,\n          //same as color by default\n          fillOpacity: 0.2,\n          clickable: true\n        }\n      };\n      var polygonDrawer = new window.L.Draw.Polygon(map, polygon_options);\n      polygonDrawer.enable(); // map.on('draw:edited', (e) => {\n      //     // Update db to save latest changes.\n      //     var layers = e.layers;\n      //     layers.eachLayer((layer) => {\n      //         const lattitude = JSON.stringify(layer.getLatLngs()[0]) \n      //         console.log(layer);\n      //         this.longitudeLattitude = lattitude\n      //     });\n      // });\n      // let poly = L.polygon([{\"lat\":50.090442692166135,\"lng\":6.8115234375},{\"lat\":49.165903234689395,\"lng\":8.964843750000002},{\"lat\":49.9917194319911,\"lng\":9.492187500000002}], {color: 'red'});\n      // map.addLayer(poly)\n      // poly.addTo(map)\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SACAA,IADA,EACAC,UADA,EACAC,QADA,QAEA,cAFA;AAGA;AACA;AACA;AACA;AACA,0B,CACA;AACA;AACA;AACA;;AAEA;EACAC,kBADA;EAEAC;IACAJ,UADA;IAEAC,sBAFA;IAGAI,sBAHA;IAIAH,kBAJA,CAKA;IACA;IACA;IACA;;EARA,CAFA;EAYAI,IAZA,kBAYA;IACA;MACAC,8CADA;MAEAC,QAFA;MAGAC,8BAHA;MAIAC,YAJA;MAKAC;IALA;EAOA,CApBA;EAqBAC,OArBA,qBAqBA;IACAC;EACA,CAvBA;EAwBAC;IACAC,WADA,uBACAP,IADA,EACA;MACA;IACA,CAHA;IAIAQ,aAJA,yBAIAP,MAJA,EAIA;MACA;IACA,CANA;IAOAQ,aAPA,yBAOAP,MAPA,EAOA;MACA;IACA,CATA;IAUAQ,QAVA,sBAUA;MACA;IACA,CAZA;IAaAC,SAbA,uBAaA;MACA;IACA,CAfA;IAgBAC,WAhBA,yBAgBA;MACA;MACA;MACAC;MAEAA;QACA;QAAA,IACAC,eADA;;QAGA;UACAA;QACA;;QAEAC;MACA,CATA;MAUA;QACAC,eADA;QAEAC;UACAC,YADA;UAEAC,gBAFA;UAGAC,SAHA;UAIAC,YAJA;UAKAC,UALA;UAMAC,eANA;UAMA;UACAC,gBAPA;UAQAC;QARA;MAFA;MAaA;MACAC,uBA7BA,CA8BA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EA3DA;AAxBA","names":["LMap","LTileLayer","LPolygon","name","components","ToolBarMap","data","url","zoom","center","bounds","polygons","mounted","axios","methods","zoomUpdated","centerUpdated","boundsUpdated","zoomPlus","zoomMinus","editPolygon","map","layer","drawnItems","showArea","shapeOptions","stroke","color","weight","opacity","fill","fillColor","fillOpacity","clickable","polygonDrawer"],"sourceRoot":"src/components/Map","sources":["CustomMap.vue"],"sourcesContent":["<template>\n\t<div>\n\t\t<l-map\n      id=\"map\"\n      style=\"height: 100vh;\"\n      ref=\"map\"\n      :zoom=\"zoom\"\n      :center=\"center\"\n      @update:zoom=\"zoomUpdated\"\n      @update:center=\"centerUpdated\"\n      @update:bounds=\"boundsUpdated\"\n      >\n      <l-tile-layer :url=\"url\" />\n  </l-map>\n   <l-polygon v-for=\"(polygon,index) in polygons\" :lat-lngs=\"polygon.latlngs\" :color=\"polygon.color\"  :key=\"'polygon'+index\"></l-polygon>\n  <tool-bar-map @zoomPlus=\"zoomPlus\" @zoomMinus=\"zoomMinus\" @editPolygon=\"editPolygon\" />\n  <!-- <form-district /> -->\n  <!-- <form-city /> -->\n  <!-- <form-route /> -->\n  <!-- <form-home /> -->\n\t</div>\n</template>\n\n<script>\nimport {\n  LMap, LTileLayer, LPolygon\n} from 'vue2-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport 'leaflet-draw'\nimport 'leaflet-draw/dist/leaflet.draw.css'\nimport ToolBarMap from './ToolBarMap.vue'\nimport axios from 'axios'\n// import FormDistrict from './FormDistrict.vue'\n// import FormCity from './FormCity.vue'\n// import FormRoute from './FormRoute.vue'\n// import FormHome from './FormHome.vue'\n\nexport default {\n  name: 'custom-map',\n\tcomponents: {\n    LMap,\n    LTileLayer,\n    ToolBarMap,\n    LPolygon\n    // FormDistrict,\n    // FormCity,\n    // FormRoute,\n    // FormHome,\n},\n\tdata(){\n    return {\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      zoom: 11,\n      center: [40.288405, 69.644229],\n      bounds: null,\n      polygons: {},\n    }\n  },\n  mounted() {\n    axios.get('https://sip.gram.tj/api/addresses/zones/1/edit')\n  },\n\tmethods: {\n    zoomUpdated(zoom) {\n      this.zoom = zoom;\n    },\n    centerUpdated(center) {\n      this.center = center;\n    },\n    boundsUpdated(bounds) {\n      this.bounds = bounds;\n    },\n    zoomPlus() {\n      this.zoom++\n    },\n    zoomMinus() {\n      this.zoom--\n    },\n    editPolygon() {\n            const map = this.$refs.map.mapObject;\n            var drawnItems = new window.L.FeatureGroup()\n            map.addLayer(drawnItems)\n\n            map.on('draw:created', (e) => {\n                var type = e.layerType,\n                    layer = e.layer;\n                \n                if (type === 'marker') {\n                    layer.bindPopup('A popup!');\n                }\n                \n                drawnItems.addLayer(layer);\n            });\n            const polygon_options = {\n              showArea: false,\n              shapeOptions: {\n                stroke: true,\n                color: '#6e83f0',\n                weight: 4,\n                opacity: 0.5,\n                fill: true,\n                fillColor: null, //same as color by default\n                fillOpacity: 0.2,\n                clickable: true\n              }\n            }\n            var polygonDrawer = new window.L.Draw.Polygon(map, polygon_options);     \n            polygonDrawer.enable();\n            // map.on('draw:edited', (e) => {\n            //     // Update db to save latest changes.\n            //     var layers = e.layers;\n                \n            //     layers.eachLayer((layer) => {\n            //         const lattitude = JSON.stringify(layer.getLatLngs()[0]) \n            //         console.log(layer);\n            //         this.longitudeLattitude = lattitude\n            //     });\n            // });\n            // let poly = L.polygon([{\"lat\":50.090442692166135,\"lng\":6.8115234375},{\"lat\":49.165903234689395,\"lng\":8.964843750000002},{\"lat\":49.9917194319911,\"lng\":9.492187500000002}], {color: 'red'});\n            // map.addLayer(poly)\n            // poly.addTo(map)\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}