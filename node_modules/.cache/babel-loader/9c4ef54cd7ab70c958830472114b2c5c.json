{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { LMap, LTileLayer } from 'vue2-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport ToolBarMap from './ToolBarMap.vue'; // import FormDistrict from './FormDistrict.vue'\n// import FormCity from './FormCity.vue'\n// import FormRoute from './FormRoute.vue'\n// import FormHome from './FormHome.vue'\n\nexport default {\n  name: 'custom-map',\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    ToolBarMap: ToolBarMap // FormDistrict,\n    // FormCity,\n    // FormRoute,\n    // FormHome,\n\n  },\n  data: function data() {\n    return {\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      zoom: 11,\n      center: [40.288405, 69.644229],\n      bounds: null\n    };\n  },\n  mounted: function mounted() {\n    var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png',\n        cloudmade = new L.TileLayer(cloudmadeUrl, {\n      maxZoom: 18\n    }),\n        map = new L.Map('map', {\n      layers: [cloudmade],\n      center: new L.LatLng(51.505, -0.04),\n      zoom: 13\n    });\n    var drawnItems = new L.FeatureGroup();\n    map.addLayer(drawnItems);\n    map.on('draw:created', function (e) {\n      var type = e.layerType,\n          layer = e.layer;\n      drawnItems.addLayer(layer);\n    });\n    polygon_options = {\n      showArea: false,\n      shapeOptions: {\n        stroke: true,\n        color: '#6e83f0',\n        weight: 4,\n        opacity: 0.5,\n        fill: true,\n        fillColor: null,\n        //same as color by default\n        fillOpacity: 0.2,\n        clickable: true\n      }\n    };\n\n    function drawPolygon() {\n      var polygonDrawer = new L.Draw.Polygon(map, polygon_options);\n      polygonDrawer.enable();\n    }\n  },\n  methods: {\n    zoomUpdated: function zoomUpdated(zoom) {\n      this.zoom = zoom;\n    },\n    centerUpdated: function centerUpdated(center) {\n      this.center = center;\n    },\n    boundsUpdated: function boundsUpdated(bounds) {\n      this.bounds = bounds;\n    },\n    zoomPlus: function zoomPlus() {\n      this.zoom++;\n    },\n    zoomMinus: function zoomMinus() {\n      this.zoom--;\n    } // editPolygon() {\n    //         const map = this.$refs.map.mapObject;\n    //         var drawnItems = new window.L.FeatureGroup()\n    //         map.addLayer(drawnItems)\n    //         map.on('draw:created', (e) => {\n    //             var type = e.layerType,\n    //                 layer = e.layer;\n    //             if (type === 'marker') {\n    //                 layer.bindPopup('A popup!');\n    //             }\n    //             drawnItems.addLayer(layer);\n    //         });\n    //         map.on('draw:edited', (e) => {\n    //             // Update db to save latest changes.\n    //             var layers = e.layers;\n    //             layers.eachLayer((layer) => {\n    //                 const lattitude = JSON.stringify(layer.getLatLngs()[0]) \n    //                 console.log(layer);\n    //                 this.longitudeLattitude = lattitude\n    //             });\n    //         });\n    //         // let poly = L.polygon([{\"lat\":50.090442692166135,\"lng\":6.8115234375},{\"lat\":49.165903234689395,\"lng\":8.964843750000002},{\"lat\":49.9917194319911,\"lng\":9.492187500000002}], {color: 'red'});\n    //         // map.addLayer(poly)\n    //         // poly.addTo(map)\n    // }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAuBA,SACAA,IADA,EACAC,UADA,QAEA,cAFA;AAGA;AACA;AACA;AACA,0C,CACA;AACA;AACA;AACA;;AAEA;EACAC,kBADA;EAEAC;IACAH,UADA;IAEAC,sBAFA;IAGAG,sBAHA,CAIA;IACA;IACA;IACA;;EAPA,CAFA;EAWAC,IAXA,kBAWA;IACA;MACAC,8CADA;MAEAC,QAFA;MAGAC,8BAHA;MAIAC;IAJA;EAMA,CAlBA;EAmBAC,OAnBA,qBAmBA;IACA;IAAA,IACAC;MAAAC;IAAA,EADA;IAAA,IAEAC;MAAAC;MAAAN;MAAAD;IAAA,EAFA;IAGA;IACAM;IAEAA;MACA;MAAA,IACAE,eADA;MAEAC;IACA,CAJA;IAMAC;MACAC,eADA;MAEAC;QACAC,YADA;QAEAC,gBAFA;QAGAC,SAHA;QAIAC,YAJA;QAKAC,UALA;QAMAC,eANA;QAMA;QACAC,gBAPA;QAQAC;MARA;IAFA;;IAcA;MACA;MACAC;IACA;EACA,CAlDA;EAmDAC;IACAC,WADA,uBACAvB,IADA,EACA;MACA;IACA,CAHA;IAIAwB,aAJA,yBAIAvB,MAJA,EAIA;MACA;IACA,CANA;IAOAwB,aAPA,yBAOAvB,MAPA,EAOA;MACA;IACA,CATA;IAUAwB,QAVA,sBAUA;MACA;IACA,CAZA;IAaAC,SAbA,uBAaA;MACA;IACA,CAfA,CAgBA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EA7CA;AAnDA","names":["LMap","LTileLayer","name","components","ToolBarMap","data","url","zoom","center","bounds","mounted","cloudmade","maxZoom","map","layers","layer","drawnItems","polygon_options","showArea","shapeOptions","stroke","color","weight","opacity","fill","fillColor","fillOpacity","clickable","polygonDrawer","methods","zoomUpdated","centerUpdated","boundsUpdated","zoomPlus","zoomMinus"],"sourceRoot":"src/components/Map","sources":["CustomMap.vue"],"sourcesContent":["<template>\n\t<div>\n\t\t<l-map\n      id=\"map\"\n      style=\"height: 100vh;\"\n      ref=\"map\"\n      :zoom=\"zoom\"\n      :center=\"center\"\n      @update:zoom=\"zoomUpdated\"\n      @update:center=\"centerUpdated\"\n      @update:bounds=\"boundsUpdated\"\n      >\n      <l-tile-layer :url=\"url\" />\n  </l-map>\n  <tool-bar-map @zoomPlus=\"zoomPlus\" @zoomMinus=\"zoomMinus\"  />\n  <!-- <form-district @editPolygon=\"editPolygon\" /> -->\n  <!-- <form-city /> -->\n  <!-- <form-route /> -->\n  <!-- <form-home /> -->\n\t</div>\n</template>\n\n<script>\nimport {\n  LMap, LTileLayer\n} from 'vue2-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport 'leaflet-draw'\nimport 'leaflet-draw/dist/leaflet.draw.css'\nimport ToolBarMap from './ToolBarMap.vue'\n// import FormDistrict from './FormDistrict.vue'\n// import FormCity from './FormCity.vue'\n// import FormRoute from './FormRoute.vue'\n// import FormHome from './FormHome.vue'\n\nexport default {\n  name: 'custom-map',\n\tcomponents: {\n    LMap,\n    LTileLayer,\n    ToolBarMap,\n    // FormDistrict,\n    // FormCity,\n    // FormRoute,\n    // FormHome,\n},\n\tdata(){\n    return {\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      zoom: 11,\n      center: [40.288405, 69.644229],\n      bounds: null,\n    }\n  },\n  mounted(){\n     var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png',\n        cloudmade = new L.TileLayer(cloudmadeUrl, {maxZoom: 18}),\n        map = new L.Map('map', {layers: [cloudmade], center: new L.LatLng(51.505, -0.04), zoom: 13});\n        var drawnItems = new L.FeatureGroup();\n        map.addLayer(drawnItems);\n\n        map.on('draw:created', function (e) {\n            var type = e.layerType,\n            layer = e.layer;\n            drawnItems.addLayer(layer);\n        });\n\n        polygon_options = {\n            showArea: false,\n            shapeOptions: {\n                stroke: true,\n                color: '#6e83f0',\n                weight: 4,\n                opacity: 0.5,\n                fill: true,\n                fillColor: null, //same as color by default\n                fillOpacity: 0.2,\n                clickable: true\n            }\n        }\n\n        function drawPolygon(){\n            var polygonDrawer = new L.Draw.Polygon(map, polygon_options);     \n            polygonDrawer.enable();\n        }\n  },\n\tmethods: {\n    zoomUpdated(zoom) {\n      this.zoom = zoom;\n    },\n    centerUpdated(center) {\n      this.center = center;\n    },\n    boundsUpdated(bounds) {\n      this.bounds = bounds;\n    },\n    zoomPlus() {\n      this.zoom++\n    },\n    zoomMinus() {\n      this.zoom--\n    },\n    // editPolygon() {\n    //         const map = this.$refs.map.mapObject;\n    //         var drawnItems = new window.L.FeatureGroup()\n    //         map.addLayer(drawnItems)\n\n    //         map.on('draw:created', (e) => {\n    //             var type = e.layerType,\n    //                 layer = e.layer;\n                \n    //             if (type === 'marker') {\n    //                 layer.bindPopup('A popup!');\n    //             }\n                \n    //             drawnItems.addLayer(layer);\n    //         });\n\n    //         map.on('draw:edited', (e) => {\n    //             // Update db to save latest changes.\n    //             var layers = e.layers;\n                \n    //             layers.eachLayer((layer) => {\n    //                 const lattitude = JSON.stringify(layer.getLatLngs()[0]) \n    //                 console.log(layer);\n    //                 this.longitudeLattitude = lattitude\n    //             });\n    //         });\n    //         // let poly = L.polygon([{\"lat\":50.090442692166135,\"lng\":6.8115234375},{\"lat\":49.165903234689395,\"lng\":8.964843750000002},{\"lat\":49.9917194319911,\"lng\":9.492187500000002}], {color: 'red'});\n    //         // map.addLayer(poly)\n    //         // poly.addTo(map)\n    // }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}